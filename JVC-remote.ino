/*
 *  ESP8266 NodeMCU MQTT JVC Projector Control
 *  
 */
#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include <SoftwareSerial.h>

SoftwareSerial RS232Out(12, 13); // RX, TX
 
//Enter your wifi credentials
const char* ssid = "ssid";  
const char* password =  "password";

//Enter your mqtt server configurations
const char* mqttServer = "ip or host name";   //Enter Your mqttServer address
const int mqttPort = port;                    //Port number
const char* mqttUser = "mqtt username";       //User
const char* mqttPassword = "mqtt password";   //Password

//Remote control codes
char PowerOff[] = "\x21\x89\x01\x50\x57\x30\x0A\r";
char PowerOn[] = "\x21\x89\x01\x50\x57\x31\x0A\r";
char InputHDMI1[] = "\x21\x89\x01\x49\x50\x36\x0A\r";
char InputHDMI2[] = "\x21\x89\x01\x49\x50\x37\x0A\r";
char InputComponent[] = "\x21\x89\x01\x49\x50\x32\x0A\r";
char InputSVideo[] = "\x21\x89\x01\x49\x50\x30\x0A\r";
char InputVideo[] = "\x21\x89\x01\x49\x50\x31\x0A\r";
char Inputplus[] = "\x21\x89\x01\x49\x50\x2B\x0A\r";
char Inputmin[] = "\x21\x89\x01\x49\x50\x2D\x0A\r";
char TestPatternOff[] = "\x21\x89\x01\x54\x53\x30\x0A\r";
char TestPatternColourBars[] = "\x21\x89\x01\x54\x53\x31\x0A\r";
char TestPatternStairstepblackandwhite[] = "\x21\x89\x01\x54\x53\x36\x0A\r";
char TestPatternStairstepred[] = "\x21\x89\x01\x54\x53\x37\x0A\r";
char TestPatternStairstepgreen[] = "\x21\x89\x01\x54\x53\x38\x0A\r";
char TestPatternStairstepblue[] = "\x21\x89\x01\x54\x53\x39\x0A\r";
char TestPatternCrosshatchgreen[] = "\x21\x89\x01\x54\x53\x41\x0A\r";
char GammaNormal[] = "\x21\x89\x01\x47\x54\x30\x0A\r";
char GammaA[] = "\x21\x89\x01\x47\x54\x31\x0A\r";
char GammaB[] = "\x21\x89\x01\x47\x54\x32\x0A\r";
char GammaC[] = "\x21\x89\x01\x47\x54\x33\x0A\r";
char GammaCustom1[] = "\x21\x89\x01\x47\x54\x34\x0A\r";
char GammaCustom2[] = "\x21\x89\x01\x47\x54\x35\x0A\r";
char GammaCustom3[] = "\x21\x89\x01\x47\x54\x36\x0A\r";
char GammaCorrectionValue18[] = "\x21\x89\x01\x47\x50\x30\x0A\r";
char GammaCorrectionValue19[] = "\x21\x89\x01\x47\x50\x31\x0A\r";
char GammaCorrectionValue20[] = "\x21\x89\x01\x47\x50\x32\x0A\r";
char GammaCorrectionValue21[] = "\x21\x89\x01\x47\x50\x33\x0A\r";
char GammaCorrectionValue22Default[] = "\x21\x89\x01\x47\x50\x34\x0A\r";
char GammaCorrectionValue23[] = "\x21\x89\x01\x47\x50\x35\x0A\r";
char GammaCorrectionValue24[] = "\x21\x89\x01\x47\x50\x36\x0A\r";
char GammaCorrectionValue25[] = "\x21\x89\x01\x47\x50\x37\x0A\r";
char GammaCorrectionValue26[] = "\x21\x89\x01\x47\x50\x38\x0A\r";
char PictureModeCinema1[] = "\x21\x89\x01\x50\x4D\x50\x4D\x30\x0A\r";
char PictureModeCinema2[] = "\x21\x89\x01\x50\x4D\x50\x4D\x31\x0A\r";
char PictureModeCinema3[] = "\x21\x89\x01\x50\x4D\x50\x4D\x32\x0A\r";
char PictureModeNatural[] = "\x21\x89\x01\x50\x4D\x50\x4D\x33\x0A\r";
char PictureModeStage[] = "\x21\x89\x01\x50\x4D\x50\x4D\x34\x0A\r";
char PictureModeDynamic[] = "\x21\x89\x01\x50\x4D\x50\x4D\x35\x0A\r";
char PictureModeUser1[] = "\x21\x89\x01\x50\x4D\x50\x4D\x36\x0A\r";
char PictureModeUser2[] = "\x21\x89\x01\x50\x4D\x50\x4D\x37\x0A\r";

//Extended controls
char VerticalStretchOff[] = "\x21\x89\x01\x52\x43\x37\x33\x32\x34\x0A\r";
char VerticalStretchOn[] = "\x21\x89\x01\x52\x43\x37\x33\x32\x33\x0A\r";
char Aspect169[] = "\x21\x89\x01\x52\x43\x37\x33\x32\x36\x0A\r";
char Aspect43[] = "\x21\x89\x01\x52\x43\x37\x33\x32\x35\x0A\r";
char AspectZoom[] = "\x21\x89\x01\x52\x43\x37\x33\x32\x37\x0A\r";
char Aspectcyclesthroughallavailablemodes[] = "\x21\x89\x01\x52\x43\x37\x33\x37\x37\x0A\r";
char BackStepsbackwardsthroughmenusandremovesanyOSDmessages[] = "\x21\x89\x01\x52\x43\x37\x33\x30\x33\x0A\r";
char BNRBlockNoiseReductionOff[] = "\x21\x89\x01\x52\x43\x37\x33\x31\x30\x0A\r";
char BNRBlockNoiseReductionOn[] = "\x21\x89\x01\x52\x43\x37\x33\x30\x46\x0A\r";
char BrightnessMin[] = "\x21\x89\x01\x52\x43\x37\x33\x37\x42\x0A\r";
char BrightnessPlus[] = "\x21\x89\x01\x52\x43\x37\x33\x37\x41\x0A\r";
char BrightnessAdjAdjustmentBarOnOfftoggle[] = "\x21\x89\x01\x52\x43\x37\x33\x30\x39\x0A\r";
char CECOff[] = "\x21\x89\x01\x52\x43\x37\x33\x35\x37\x0A\r";
char CECOn[] = "\x21\x89\x01\x52\x43\x37\x33\x35\x36\x0A\r";
char ColourMin[] = "\x21\x89\x01\x52\x43\x37\x33\x37\x44\x0A\r";
char ColourPlus[] = "\x21\x89\x01\x52\x43\x37\x33\x37\x43\x0A\r";
char ColourAdjAdjustmentBarOnOfftoggle[] = "\x21\x89\x01\x52\x43\x37\x33\x31\x35\x0A\r";
char ColourTemp5800K[] = "\x21\x89\x01\x52\x43\x37\x33\x34\x45\x0A\r";
char ColourTemp6500K[] = "\x21\x89\x01\x52\x43\x37\x33\x34\x46\x0A\r";
char ColourTemp7500K[] = "\x21\x89\x01\x52\x43\x37\x33\x35\x30\x0A\r";
char ColourTemp9300K[] = "\x21\x89\x01\x52\x43\x37\x33\x35\x31\x0A\r";
char ColourTempCustom1[] = "\x21\x89\x01\x52\x43\x37\x33\x35\x33\x0A\r";
char ColourTempCustom2[] = "\x21\x89\x01\x52\x43\x37\x33\x35\x34\x0A\r";
char ColourTempCustom3[] = "\x21\x89\x01\x52\x43\x37\x33\x35\x35\x0A\r";
char ColourTempHighBright[] = "\x21\x89\x01\x52\x43\x37\x33\x35\x32\x0A\r";
char ColourTempcyclesthroughalloptions[] = "\x21\x89\x01\x52\x43\x37\x33\x37\x36\x0A\r";
char ContrastMin[] = "\x21\x89\x01\x52\x43\x37\x33\x37\x39\x0A\r";
char ContrastPlus[] = "\x21\x89\x01\x52\x43\x37\x33\x37\x38\x0A\r";
char ContrastAdjAdjustmentBarOnOfftoggle[] = "\x21\x89\x01\x52\x43\x37\x33\x30\x41\x0A\r";
char CTIColourTransientImprovementOff[] = "\x21\x89\x01\x52\x43\x37\x33\x35\x43\x0A\r";
char CTIColourTransientImprovementLow[] = "\x21\x89\x01\x52\x43\x37\x33\x35\x44\x0A\r";
char CTIColourTransientImprovementMiddle[] = "\x21\x89\x01\x52\x43\x37\x33\x35\x45\x0A\r";
char CTIColourTransientimprovementHigh[] = "\x21\x89\x01\x52\x43\x37\x33\x35\x46\x0A\r";
char CursorDown[] = "\x21\x89\x01\x52\x43\x37\x33\x30\x32\x0A\r";
char CursorLeft[] = "\x21\x89\x01\x52\x43\x37\x33\x33\x36\x0A\r";
char CursorRight[] = "\x21\x89\x01\x52\x43\x37\x33\x33\x34\x0A\r";
char CursorUp[] = "\x21\x89\x01\x52\x43\x37\x33\x30\x31\x0A\r";
char DetailEnhanceMin[] = "\x21\x89\x01\x52\x43\x37\x33\x31\x32\x0A\r";
char DetailEnhancePlus[] = "\x21\x89\x01\x52\x43\x37\x33\x31\x31\x0A\r";
char Gammacyclesthroughalloptions[] = "\x21\x89\x01\x52\x43\x37\x33\x37\x35\x0A\r";
char HideOnOfftoggle[] = "\x21\x89\x01\x52\x43\x37\x33\x31\x44\x0A\r";
char InformationdisplaysInformationtabofmenu[] = "\x21\x89\x01\x52\x43\x37\x33\x37\x34\x0A\r";
char Inputcyclesthroughallavailableinputs[] = "\x21\x89\x01\x52\x43\x37\x33\x30\x38\x0A\r";
char KeystoneCorrectionHorizontalMin[] = "\x21\x89\x01\x52\x43\x37\x33\x34\x31\x0A\r";
char KeystoneCorrectionHorizontalPlus[] = "\x21\x89\x01\x52\x43\x37\x33\x34\x30\x0A\r";
char KeystoneCorrectionVerticalMin[] = "\x21\x89\x01\x52\x43\x37\x33\x31\x43\x0A\r";
char KeystoneCorrectionVerticalPlus[] = "\x21\x89\x01\x52\x43\x37\x33\x31\x42\x0A\r";
char LensAperture1[] = "\x21\x89\x01\x52\x43\x37\x33\x32\x38\x0A\r";
char LensAperture2[] = "\x21\x89\x01\x52\x43\x37\x33\x32\x39\x0A\r";
char LensAperture3[] = "\x21\x89\x01\x52\x43\x37\x33\x32\x41\x0A\r";
char LensApertureAdj[] = "\x21\x89\x01\x52\x43\x37\x33\x32\x30\x0A\r";
char LensControlcyclesthroughalloptions[] = "\x21\x89\x01\x52\x43\x37\x33\x33\x30\x0A\r";
char LensFocusMin[] = "\x21\x89\x01\x52\x43\x37\x33\x33\x32\x0A\r";
char LensFocusPlus[] = "\x21\x89\x01\x52\x43\x37\x33\x33\x31\x0A\r";
char LensShiftDown[] = "\x21\x89\x01\x52\x43\x37\x33\x32\x32\x0A\r";
char LensShiftLeft[] = "\x21\x89\x01\x52\x43\x37\x33\x34\x34\x0A\r";
char LensShiftRight[] = "\x21\x89\x01\x52\x43\x37\x33\x34\x33\x0A\r";
char LensShiftUp[] = "\x21\x89\x01\x52\x43\x37\x33\x32\x31\x0A\r";
char LensZooPlus[] = "\x21\x89\x01\x52\x43\x37\x33\x33\x35\x0A\r";
char LensZoomOut[] = "\x21\x89\x01\x52\x43\x37\x33\x33\x37\x0A\r";
char MenuOnOfftoggle[] = "\x21\x89\x01\x52\x43\x37\x33\x32\x45\x0A\r";
char MNRMosquitoNoiseReductionMin[] = "\x21\x89\x01\x52\x43\x37\x33\x30\x45\x0A\r";
char MNRMosquitoNoiseReductionPlus[] = "\x21\x89\x01\x52\x43\x37\x33\x30\x44\x0A\r";
char NRtogglesdisplayofRNRMNR[] = "\x21\x89\x01\x52\x43\x37\x33\x31\x38\x0A\r";
char OKtoacceptcurrentlyselectedoption[] = "\x21\x89\x01\x52\x43\x37\x33\x32\x46\x0A\r";
char PowerOffsendtwicewithshortdelaybetweentoswitchoff[] = "\x21\x89\x01\x52\x43\x37\x33\x30\x36\x0A\r";
char RNRRandomNoiseReductionMin[] = "\x21\x89\x01\x52\x43\x37\x33\x30\x43\x0A\r";
char RNRRandomNoiseReductionPlus[] = "\x21\x89\x01\x52\x43\x37\x33\x30\x42\x0A\r";
char SharpnessMin[] = "\x21\x89\x01\x52\x43\x37\x33\x37\x46\x0A\r";
char SharpnessPlus[] = "\x21\x89\x01\x52\x43\x37\x33\x37\x45\x0A\r";
char SharpnessAdj[] = "\x21\x89\x01\x52\x43\x37\x33\x31\x34\x0A\r";
char TestPatterncyclesthroughallpatterns[] = "\x21\x89\x01\x52\x43\x37\x33\x35\x39\x0A\r";

WiFiClient espClient;
PubSubClient client(espClient);
 
void setup() {
  delay(1000);
  Serial.begin(19200);
 
  WiFi.begin(ssid, password);
 
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Connecting to WiFi..");
  }
  Serial.print("Connected to WiFi :");
  Serial.println(WiFi.SSID());
 
  client.setServer(mqttServer, mqttPort);
  client.setCallback(MQTTcallback);
 
  while (!client.connected()) {
    Serial.println("Connecting to MQTT...");

    if (client.connect("JVC DLA-HD350", mqttUser, mqttPassword )) {
 
      Serial.println("connected");  
 
    } else {
 
      Serial.print("failed with state ");
      Serial.println(client.state());  //If you get state 5: mismatch in configuration
      delay(2000);
 
    }
  }
 
  client.publish("projector/state", "JVC DLA-HD350 ready");
  client.subscribe("projector/commands");
 
}
 
void MQTTcallback(char* topic, byte* payload, unsigned int length) {
 
  RS232Out.begin(19200);
  Serial.print("Message arrived in topic: ");
  Serial.println(topic);
 
  Serial.print("Message:");

  String message;
  for (int i = 0; i < length; i++) {
    message = message + (char)payload[i];  //Conver *byte to String
  }
   Serial.print(message);
   RS232Out.write(message);
 
  Serial.println();
  Serial.println("-----------------------");  
}
 
void loop() {
  client.loop();
}
